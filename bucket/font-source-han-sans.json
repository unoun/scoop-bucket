{
    "version": "2.004R",
    "description": "Pan-CJK font",
    "homepage": "https://github.com/adobe-fonts/source-han-sans",
    "license": "OFL-1.1-RFN",
    "url": "https://github.com/adobe-fonts/source-han-sans/releases/download/2.004R/SourceHanSans.ttc.zip",
    "hash": "6f59118a9adda5a7fe4e9e6bb538309f7e1d3c5411f9a9d32af32a79501b7e4f",
    "depends": "sudo",
    "installer": {
        "script": [
            "function Get-FontInfo([System.IO.FileInfo] $file, $index) {",
            "    $job = Start-Job -ScriptBlock {",
            "        Add-Type -AssemblyName PresentationCore",
            "        $uri = [UriBuilder]::new($using:file.FullName)",
            "        $uri.Fragment = $using:index",
            "        $font = [Windows.Media.GlyphTypeface]::new($uri.Uri)",
            "        return @{",
            "            'FamilyName' = $font.FamilyNames['en-US']",
            "            'FaceName' = $font.FaceNames['en-US']",
            "            'Win32FamilyName' = $font.Win32FamilyNames['en-US']",
            "            'Win32FaceName' = $font.Win32FaceNames['en-US']",
            "        }",
            "    }",
            "    Wait-Job -Job $job | Out-Null",
            "    $ret = Receive-Job $job",
            "    Remove-Job $job",
            "    return $ret",
            "}",
            "function Get-NumberOfFonts([System.IO.FileInfo] $file) {",
            "    try {",
            "        $fr = [System.IO.File]::Open($file.FullName,",
            "            [System.IO.FileMode]::Open,",
            "            [System.IO.FileAccess]::Read,",
            "            [System.IO.FileShare]::ReadWrite + [System.IO.FileShare]::Delete)",
            "        $br = [System.IO.BinaryReader]::new($fr)",
            "        $br.ReadBytes(4+2+2) | Out-Null",
            "        $b = $br.ReadBytes(4)",
            "        if ([BitConverter]::IsLittleEndian) {",
            "            [Array]::Reverse($b)",
            "        }",
            "        $ret = [BitConverter]::ToUInt32($b, 0)",
            "    } finally {",
            "        if ($br -ne $null) {",
            "            $br.Close()",
            "        }",
            "        if ($fr -ne $null) {",
            "            $fr.Close()",
            "        }",
            "    }",
            "    return $ret",
            "}",
            "function Get-TTCName([System.IO.FileInfo] $file) {",
            "    $numFonts = Get-NumberOfFonts($file)",
            "    $i = 0",
            "    $fontList = @()",
            "    while ($i -lt $numFonts) {",
            "        $fontInfo = Get-FontInfo $file $i",
            "        if (\"$($fontInfo.FamilyName) $($fontInfo.FaceName)\" -eq $fontInfo.Win32FamilyName) {",
            "            $fontList += $fontInfo.Win32FamilyName",
            "        } else {",
            "            $fontList += \"$($fontInfo.Win32FamilyName) $($fontInfo.Win32FaceName)\"",
            "        }",
            "        $i++",
            "        if (($fontList -join ' & ').Length -gt 255) {",
            "            break",
            "        }",
            "    }",
            "    $fontName = $fontList -join ' & '",
            "    if ($i -eq $numFonts) {",
            "        $fontName += ' (TrueType)'",
            "    }",
            "    return $fontName",
            "}",
            "$fontsDir = \"$env:LOCALAPPDATA\\Microsoft\\Windows\\Fonts\"",
            "$regPath = \"HKCU:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Fonts\"",
            "New-Item $fontsDir -ItemType Directory -ErrorAction SilentlyContinue",
            "Get-ChildItem $dir -Filter \"*.ttc\" -Recurse | ForEach-Object {",
            "    $fontName = Get-TTCName($_)",
            "    info \"Installing font $($_.Name) -> $fontName\"",
            "    Copy-Item $_.FullName -Destination $fontsDir",
            "    New-ItemProperty -Path $regPath -Name $fontName -Value \"$fontsDir\\$($_.Name)\" -Force | Out-Null",
            "}"
        ]
    },
    "uninstaller": {
        "script": [
            "if (!(is_admin)) { error \"Use sudo\"; exit 1 }",
            "function Get-FontInfo([System.IO.FileInfo] $file, $index) {",
            "    $job = Start-Job -ScriptBlock {",
            "        Add-Type -AssemblyName PresentationCore",
            "        $uri = [UriBuilder]::new($using:file.FullName)",
            "        $uri.Fragment = $using:index",
            "        $font = [Windows.Media.GlyphTypeface]::new($uri.Uri)",
            "        return @{",
            "            'FamilyName' = $font.FamilyNames['en-US']",
            "            'FaceName' = $font.FaceNames['en-US']",
            "            'Win32FamilyName' = $font.Win32FamilyNames['en-US']",
            "            'Win32FaceName' = $font.Win32FaceNames['en-US']",
            "        }",
            "    }",
            "    Wait-Job -Job $job | Out-Null",
            "    $ret = Receive-Job $job",
            "    Remove-Job $job",
            "    return $ret",
            "}",
            "function Get-NumberOfFonts([System.IO.FileInfo] $file) {",
            "    try {",
            "        $fr = [System.IO.File]::Open($file.FullName,",
            "            [System.IO.FileMode]::Open,",
            "            [System.IO.FileAccess]::Read,",
            "            [System.IO.FileShare]::ReadWrite + [System.IO.FileShare]::Delete)",
            "        $br = [System.IO.BinaryReader]::new($fr)",
            "        $br.ReadBytes(4+2+2) | Out-Null",
            "        $b = $br.ReadBytes(4)",
            "        if ([BitConverter]::IsLittleEndian) {",
            "            [Array]::Reverse($b)",
            "        }",
            "        $ret = [BitConverter]::ToUInt32($b, 0)",
            "    } finally {",
            "        if ($br -ne $null) {",
            "            $br.Close()",
            "        }",
            "        if ($fr -ne $null) {",
            "            $fr.Close()",
            "        }",
            "    }",
            "    return $ret",
            "}",
            "function Get-TTCName([System.IO.FileInfo] $file) {",
            "    $numFonts = Get-NumberOfFonts($file)",
            "    $i = 0",
            "    $fontList = @()",
            "    while ($i -lt $numFonts) {",
            "        $fontInfo = Get-FontInfo $file $i",
            "        if (\"$($fontInfo.FamilyName) $($fontInfo.FaceName)\" -eq $fontInfo.Win32FamilyName) {",
            "            $fontList += $fontInfo.Win32FamilyName",
            "        } else {",
            "            $fontList += \"$($fontInfo.Win32FamilyName) $($fontInfo.Win32FaceName)\"",
            "        }",
            "        $i++",
            "        if (($fontList -join ' & ').Length -gt 255) {",
            "            break",
            "        }",
            "    }",
            "    $fontName = $fontList -join ' & '",
            "    if ($i -eq $numFonts) {",
            "        $fontName += ' (TrueType)'",
            "    }",
            "    return $fontName",
            "}",
            "$fontsDir = \"$env:LOCALAPPDATA\\Microsoft\\Windows\\Fonts\"",
            "$regPath = \"HKCU:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Fonts\"",
            "Get-ChildItem $dir -Filter \"*.ttc\" -Recurse | ForEach-Object {",
            "    $fontName = Get-TTCName($_)",
            "    info \"Uninstalling font $($_.Name) -> $fontName\"",
            "    Remove-ItemProperty -Path $regPath -Name $fontName -ErrorAction SilentlyContinue",
            "}",
            "if ((Get-Service 'FontCache').Status -eq 'Running') {",
            "    info \"Restart FontCache service\"",
            "    Restart-Service FontCache",
            "}",
            "Get-ChildItem $dir -Filter \"*.ttc\" -Recurse | ForEach-Object {",
            "    $fontFile = \"$fontsDir\\$($_.Name)\"",
            "    Remove-Item $fontFile -ErrorAction SilentlyContinue",
            "    if (Test-Path $fontFile) {",
            "        warn \"Couldn't remove '$fontFile'; it may be in use.\"",
            "    }",
            "}"
        ]
    }
}